---
import type { MarkdownHeading } from 'astro'
import TOCHeading from './TableOfContentsHeading.astro'
import type { TocItem, TocOpts } from '@types'

/** Inject a ToC entry as deep in the tree as its `depth` property requires. */
function injectChild(items: TocItem[], item: TocItem): void {
  const lastItem = items.at(-1)
  if (!lastItem || lastItem.depth >= item.depth) {
    items.push(item)
  } else {
    injectChild(lastItem.children, item)
    return
  }
}

function generateToc(
  headings: ReadonlyArray<MarkdownHeading>,
  { maxHeadingLevel = 4, minHeadingLevel = 2 }: TocOpts = {},
) {
  // by default this ignores/filters out h1 and h5 heading(s)
  const bodyHeadings = headings.filter(
    ({ depth }) => depth >= minHeadingLevel && depth <= maxHeadingLevel,
  )
  const toc: Array<TocItem> = []

  for (const heading of bodyHeadings) injectChild(toc, { ...heading, children: [] })

  return toc
}

interface Props {
  headings: MarkdownHeading[]
}

const { headings } = Astro.props

const toc = generateToc(headings)
---

<details
  open
  class="relative bg-foreground/6 lg:bg-transparent px-8 py-6 lg:pt-5 w-full rounded-xl border-3 lg:border-none border-accent/10 lg:sticky lg:top-12 lg:w-[300px] lg:order-2 lg:shrink-0"
>
  <summary
    class="list-none marker:hidden marker:content-[''] before:content-['>'] before:text-accent before:font-semibold before:absolute before:left-3 cursor-pointer"
    >Table of Contents</summary
  >
  <nav class="w-full text-sm">
    <ol class="mt-4 flex flex-col max-w-full">
      {toc.map((heading) => <TOCHeading heading={heading} />)}
    </ol>
  </nav>
</details>

<style>
  details[open] summary:before {
    transform: rotate(90deg);
  }
</style>
